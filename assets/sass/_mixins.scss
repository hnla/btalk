// General Mixins

// Simple font size mixin

@mixin font-size($font-size: 16) {
	$rem-font-value: ($font-size / 16);
	font-size: ($font-size * 1px);
	font-size: $rem-font-value + rem;
}

// The following Sass map handles some basic re-sizing of BP fonts.
// Sizes are set to change on the medium breakpoint.
// It is hard for BP to know what the theme is doing so we are
// limited in what we can do here.
// The dev can feed a value to the mixin which will then be calculated
// below to find a reduced size.

@mixin responsive-font($res-size: 16) {

	$the-sizes: $res-size;

	$small: round(($the-sizes / 1.2));
	$larger: $the-sizes;

	$the-sizes: (
		null:   $small,
		46.8em: $larger
	);

	@each $font-breakpoint, $resonsive-font-size in $the-sizes {

		@if $font-breakpoint == null {
			font-size: $resonsive-font-size + px;
		} @else {

			@media screen and (min-width: $font-breakpoint) {
				font-size: $resonsive-font-size + px;
			}
		}
	}
}

// Essential em based breakpoints
// mixin wraps rulesets or properties.
// written as:
// @include medium-up() {
//  body {property: value;}
// }


@mixin small-up {

	@media screen and (min-width: 24em) {

		@content;
	}
}

@mixin medium-small-max {

	@media screen and (max-width: 32em) {

		@content;
	}
}

@mixin medium-small-up {

	@media screen and (min-width: 32em) {

		@content;
	}
}

@mixin medium-max {

	@media screen and (max-width: 46.8em) {

		@content;
	}
}

@mixin medium-up {

	@media screen and (min-width: 46.8em) {

		@content;
	}
}

@mixin medium-lrg-up {

	@media screen and (min-width: 55em) {

		@content;
	}
}

@mixin large-up {

	@media screen and (min-width: 75em) {

		@content;
	}
}

@mixin xlarge-up {

	@media screen and (min-width: 84em) {

		@content;
	}
}

// 'clearfix-element' allows us to pass an element, class or id to the mixin.
// Use where we need to have float containment and where getting to
// the physical element to add a class of 'clearfix' is problematic.

@mixin clearfix-element($item) {

	#{$item}:before,
	#{$item}:after {
		content: " ";
		display: table;
	}

	#{$item}:after {
		clear: both;
	}

}

// Box model - defaults to value 'border-box'
// Vendor prefixes are  pretty much redundent for this property,
// consider removing

@mixin box-model($box-type: null) {

	@if $box-type {
		// if a param was passed through
		$box-type: $box-type;
	} @else {
		$box-type: border-box;
	}

	-webkit-box-sizing: $box-type;
	-moz-box-sizing: $box-type;
	box-sizing: $box-type;
}

// Calc e.g (100% - 10px)

@mixin calc($property, $expression) {
	#{$property}: -webkit-calc(#{$expression});
	#{$property}: -moz-calc(#{$expression});
	#{$property}: calc(#{$expression});
}

// Flexbox Mixins

// Set display to box flex & set the direcction and wrapping behavour
// shorthand for flex-direction & flex wrap - default ( row wrap )

@mixin flex-box-dir($flex-dir: "row", $flex-wrap: "nowrap") {
	display: -webkit-flex;
	display: -moz-flex;
	display: -ms-flex;
	display: -o-flex;
	display: flex;
	-webkit-flex-flow: unquote($flex-dir) unquote($flex-wrap);
	-moz-flex-flow: unquote($flex-dir) unquote($flex-wrap);
	-ms-flex-flow: unquote($flex-dir) unquote($flex-wrap);
	-o-flex-flow: unquote($flex-dir) unquote($flex-wrap);
	flex-flow: unquote($flex-dir) unquote($flex-wrap);
}

// align child items
// flex-start | flex-end | center | baseline | stretch (default)

@mixin flex-align($align: stretch) {
	-ms-flex-align: $align; //older?
	-webkit-align-items: $align;
	-webkit-box-align: $align; // old
	align-items: $align; // current specs
}

// Box-order  - shuffle item order for columns

@mixin box-order($box-order-number: 1) {
	-webkit-box-order: $box-order-number;
	-moz-order: $box-order-number;
	-ms-order: $box-order-number;
	-o-order: $box-order-number;
	order: $box-order-number;
}

// shorthand: flex-grow, flex-shrink, flex-basis for child items
// defaults 0 | 1 | auto

@mixin box-item-size($grow: 0, $shrink: 1, $basis: auto) {
	-webkit-flex: $grow $shrink $basis;
	-moz-flex: $grow $shrink $basis;
	-ms-flex: $grow $shrink $basis;
	-o-flex: $grow $shrink $basis;
	flex: $grow $shrink $basis;
}

// Vertical centering - all in one, this is a
// fixed mixin for one result/requirement.
// This class allows us to center child elements
// using flexbox. This is a progressive enhancement,
// it won't work in all browsers, older browser will simply
// fall back to non centered or using older techniques.
// N.B It would be prefereable to remove the older property syntax

@mixin center-vert() {
	display: -webkit-box; // older
	display: -ms-flexbox; // older
	display: -webkit-flex; // current prefix
	display: flex; // current specs
	-ms-flex-align: center; //older?
	-webkit-align-items: center;
	-webkit-box-align: center; // old
	align-items: center; // current specs
}


// Layout elements / lists as grids
// A combined mixin to set flex-flow & flex
// This mixin must be called on the parent i.e 'ul' or 'div'

@mixin build-flex-layout($dir: row, $row-wrap: wrap, $align: stretch, $basis: auto, $grow: 0 ) {

	@include flex-box-dir($flex-dir: $dir, $flex-wrap: $row-wrap);
	@include flex-align($align: $align);

	> * {
		@include box-item-size($grow: $grow, $shrink: 1, $basis: $basis);
	}
}

// very basic box-shadow mixin  - this needs to be
// updated & improved

@mixin box-shadow($values...) {
	-webkit-box-shadow: $values;
	-moz-box-shadow: $values;
	box-shadow: $values;
}
